generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model order {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_type  String   @db.VarChar(255)
  status      String   @db.VarChar(255)
  customer_id String   @db.Uuid
  provider_id String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user        user     @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  provider    provider @relation(fields: [provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model product {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(255)
  description String?  @db.VarChar(255)
  provider_id String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  provider    provider @relation(fields: [provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model provider {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description  String?        @db.VarChar(255)
  name         String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  user_id      String         @db.Uuid
  tenant_id    String         @db.VarChar(255)
  order        order[]
  product      product[]
  user         user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  service_rate service_rate[]
  task         task[]
}

model service_rate {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  service_type String   @db.VarChar(255)
  rate         Int
  provider_id  String   @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  provider     provider @relation(fields: [provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model task {
  id                       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  task_type                String   @db.VarChar(255)
  status                   String   @db.VarChar(255)
  logistics_coordinator_id String   @db.Uuid
  provider_id              String   @db.Uuid
  created_at               DateTime @default(now()) @db.Timestamp(6)
  updated_at               DateTime @default(now()) @db.Timestamp(6)
  user                     user     @relation(fields: [logistics_coordinator_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  provider                 provider @relation(fields: [provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String     @unique @db.VarChar(255)
  firstName   String?    @db.VarChar(255)
  lastName    String?    @db.VarChar(255)
  roq_user_id String     @db.VarChar(255)
  tenant_id   String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  order       order[]
  provider    provider[]
  task        task[]
}
